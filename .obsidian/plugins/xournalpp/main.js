/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => XoppPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian9 = require("obsidian");

// src/XoppSettingsTab.ts
var import_obsidian = require("obsidian");
var XoppSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Auto export Xournal++ files").setDesc("Automatically export Xournal++ files to PDF upon modification.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.autoExport).onChange(async (value) => {
        this.plugin.settings.autoExport = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Xournal++ installation path").setDesc("The path where Xournal++ is installed (leave empty for system default).").addText((toggle) => {
      toggle.setValue(this.plugin.settings.xournalppPath).onChange(async (value) => {
        this.plugin.settings.xournalppPath = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Xournal++ template path").setDesc(
      "The relative path of the template for any new Xournal++ file, e.g. templates/template.xopp (leave empty to use the default template)."
    ).addText((toggle) => {
      toggle.setValue(this.plugin.settings.templatePath).onChange(async (value) => {
        this.plugin.settings.templatePath = value;
        await this.plugin.saveSettings();
      });
    });
  }
};

// src/checks.ts
var import_obsidian2 = require("obsidian");
var import_child_process = require("child_process");
async function checkXoppSetup(plugin) {
  let errors = [];
  let userPath = plugin.settings.xournalppPath;
  let aliasPath = "xournalpp";
  let windowsPath = '"c:/Program Files/Xournal++/bin/xournalpp.exe"';
  let macPath = '"/Applications/Xournal++.app/Contents/MacOS/xournalpp"';
  let versionCmd = " --version";
  if (userPath) {
    try {
      await executeCommand(userPath + versionCmd);
      return userPath;
    } catch (error) {
      errors.push("User defined Xournal++ path not working: " + error.message);
    }
  }
  try {
    await executeCommand(aliasPath + versionCmd);
    return aliasPath;
  } catch (error) {
    errors.push(error.message);
  }
  if (import_obsidian2.Platform.isWin) {
    try {
      await executeCommand(windowsPath + versionCmd);
      return windowsPath;
    } catch (error) {
      errors.push(error.message);
    }
  }
  if (import_obsidian2.Platform.isMacOS) {
    try {
      await executeCommand(macPath + versionCmd);
      return macPath;
    } catch (error) {
      errors.push(error.message);
    }
  }
  new import_obsidian2.Notice("Error: Xournal++ path not setup correctly. Please check docs on how to set it up.", 1e4);
  errors.forEach((error) => console.error("Xournal++ Error:" + error));
  return "error";
}
function executeCommand(command) {
  return new Promise((resolve, reject) => {
    (0, import_child_process.exec)(command, (error) => {
      if (error) {
        reject(error);
      } else {
        resolve();
      }
    });
  });
}

// src/xoppActions.ts
var import_obsidian3 = require("obsidian");

// src/template.ts
var base64Template = "H4sIAAAAAAAAA31U2Y6jOBR9r69AzCOasAUCo6RaJCErW0iAhDe2AIXByBgS+Pom0zXdqm5prh98fM9drCsfz789S0B0CWpyWC1IdsKQRIODKg4ArJIFWUHy2/vb/AlbVAWAiFASYIgW5PWHg6IIdsJOeJK45yD5WWZKjjk4xyB5/xUYw6gtkwoTfxNNkhAZxnXzD02nOc7acBLBkv7sUte/0Jz+UeZtXqOky5PHe+4uTfvBHLcpVEYzzk6mOumINq/zalz7l18NqSJ6gWV50GzmpNCPNa1YVNoFyeUVuFKBenLtaWXyIcchpC9Xm1sEPL6T5anUN9fm2UrH3W1VDL7esez+Bn03QxUjZExwUAvxDqRrK8a+F3IJ4s+6EIM+YhmZs0p3kyPW98ExuDKzAwtmnUjJbOmr57Q2ZEuP6wpL10y1reej6xLnmUjywBttjVqezfbDweEvWMfqckCn9CQwUNFjUVV2ZifSazRbhXawyyJjdWScnYlXy3V1TpUnD0/6/WTih2xhTWPdwsOi5ZV16kMpNF2KtqyN0BSFZgoJbCguNwAGKxx2lsT3VCyErpe7Mag4Z+vLQliGUWuwGy8vMVAi/KWPEok2Dpcfu2AwV49oA2D9O5/hm62IM352oX1TwnmL44tRLku6ScVrfpMZmb88qfVuWPrBQbt6Q3c39U6iNK30cRxqDZR6yN8bDR+OQeBIgbH9Up9Zb/t1GTCl5GbTcH064z94Zt1tLSh27nDsnVsZXowD31WeN044vhSoDT1PLMvYDdjnnZb3A1eqBar9aw/VP+a6N+sPO8z+Z+7Vebf1OOkhD/qu7zo90I1dWPoFnHX05TZwH2mT+yC3iwYJzlb7ctf91mwpkNoI+/RjplFi1/ax4G8qaRpZd2aw3KsE6COtHBm7V1rqeLGL9N/XfbAdQUXFIU3TxWJO/6eSUS9BmhCPPMbZghRkYcLNBEFmmVHfWZKnGV6Q0pSdSJI8E6ejd8wIg6hIEWyrmMB9PYq/gSCPSSKC4CX5v+6f9vohejDyKQrqjKTHVBD0CXoB+tX2tX8q+P3tO/W5z/ViBAAA";

// src/xoppActions.ts
function openXournalppFile(xoppFile, app) {
  app.workspace.getLeaf().openFile(xoppFile);
  new import_obsidian3.Notice("Opening file in Xournal++");
}
async function createXoppFile(plugin, newNoteName) {
  let newNotePath = "/" + newNoteName;
  const fs = plugin.app.vault.adapter;
  try {
    const templatePath = await getTemplateFilePath(plugin, fs);
    await fs.copy(templatePath, newNotePath);
    new import_obsidian3.Notice("Xournal++ note created");
  } catch (e) {
    new import_obsidian3.Notice("Error: Could not create a Xournal++ note: " + e.message);
  }
}
function findCorrespondingXoppToPdf(pdfFilePath, plugin) {
  var _a;
  let xoppFilePath = pdfFilePath == null ? void 0 : pdfFilePath.replace(".pdf", ".xopp");
  let xoppFilename = xoppFilePath.substring(xoppFilePath.lastIndexOf("/") + 1);
  const pdfFile = plugin.app.vault.getFileByPath(pdfFilePath);
  const parentFolder = (_a = pdfFile == null ? void 0 : pdfFile.parent) != null ? _a : plugin.app.vault.getFolderByPath("/");
  const xoppFile = parentFolder == null ? void 0 : parentFolder.children.find((child) => child.name === xoppFilename);
  if (xoppFile instanceof import_obsidian3.TFile)
    return xoppFile;
}
async function getTemplateFilePath(plugin, fs) {
  const userTemplatePath = plugin.settings.templatePath;
  if (userTemplatePath) {
    if (!await fs.exists(userTemplatePath))
      throw new Error("Could not find the given template file.");
    return userTemplatePath;
  }
  const DEFAULT_TEMPLATE_PATH = plugin.app.vault.configDir + "/plugins/" + plugin.manifest.id + "/template.xopp";
  if (!await fs.exists(DEFAULT_TEMPLATE_PATH)) {
    await createTemplate(plugin, DEFAULT_TEMPLATE_PATH).catch(() => {
      throw new Error("Unable to get or create the default template.");
    });
  }
  return DEFAULT_TEMPLATE_PATH;
}
async function createTemplate(plugin, path) {
  let binaryString = atob(base64Template);
  let bytes = new Uint8Array(binaryString.length);
  for (let i = 0; i < binaryString.length; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  await plugin.app.vault.createBinary(path, bytes.buffer);
}

// src/modal.ts
var import_obsidian4 = require("obsidian");
var createXoppFileModal = class extends import_obsidian4.Modal {
  constructor(app, plugin, path = "") {
    super(app);
    this.plugin = plugin;
    this.filePath = path ? path + "/" : "";
  }
  onOpen() {
    const { contentEl } = this;
    let fileName;
    let container = contentEl.createDiv({ cls: "new-file-modal-form" });
    new import_obsidian4.TextComponent(container).setPlaceholder("File name").onChange((i) => fileName = i).inputEl.addEventListener("keypress", (e) => {
      if (e.key === "Enter")
        this.submitInput(fileName);
    });
    new import_obsidian4.ButtonComponent(container).setButtonText("Create").onClick(() => {
      this.submitInput(fileName);
    });
  }
  submitInput(path) {
    path += ".xopp";
    createXoppFile(this.plugin, this.filePath + path);
    this.close();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/xopp2pdf.ts
var import_obsidian5 = require("obsidian");
var import_child_process2 = require("child_process");
function exportXoppToPDF(plugin, filePaths, notify = true) {
  let errors = false;
  filePaths.forEach(async (filePath) => {
    let fs = plugin.app.vault.adapter;
    if (fs instanceof import_obsidian5.FileSystemAdapter) {
      let vaultPath = fs.getBasePath();
      let xoppFilePath = vaultPath + "/" + filePath;
      let pdfFilePath = xoppFilePath.replace(".xopp", ".pdf");
      let path = await checkXoppSetup(plugin);
      if (!path || path === "error") {
        new import_obsidian5.Notice("Error: Xournal++ path not setup correctly. Please check docs on how to set it up.", 1e4);
        return;
      }
      let command = `${path} --create-pdf="${pdfFilePath}" "${xoppFilePath}"`;
      (0, import_child_process2.exec)(command, (error) => {
        if (error) {
          console.error(`Error converting Xournal++ to PDF: ${error.message}`);
          errors = true;
          return;
        }
      });
    }
  });
  if (errors) {
    new import_obsidian5.Notice("Error converting Xournal++ to PDF. Check the console for more information.");
    return;
  }
  if (notify)
    new import_obsidian5.Notice("Exported all Xournal++ notes successfully.");
}

// src/commands.ts
function createCommands(plugin) {
  plugin.addCommand({
    id: "open-in-xournalpp",
    name: "Open current note",
    checkCallback: (checking) => {
      var _a, _b;
      let pdfFilePath = (_a = plugin.app.workspace.getActiveFile()) == null ? void 0 : _a.path;
      if (!pdfFilePath || ((_b = plugin.app.workspace.getActiveFile()) == null ? void 0 : _b.extension) !== "pdf")
        return false;
      let xoppFile = findCorrespondingXoppToPdf(pdfFilePath, plugin);
      if (!xoppFile)
        return false;
      if (!checking)
        openXournalppFile(xoppFile, plugin.app);
      return true;
    }
  });
  plugin.addCommand({
    id: "crate-new-xournalpp",
    name: "Create a new note",
    callback: async () => {
      new createXoppFileModal(plugin.app, plugin).setTitle("Create a new Xournal++ note").open();
    }
  });
  plugin.addCommand({
    id: "export-xournalpp-to-pdf",
    name: "Export all notes to PDF",
    callback: async () => {
      let files = plugin.app.vault.getFiles();
      files = files.filter((file) => file.extension === "xopp");
      let filePaths = files.map((file) => file.path);
      exportXoppToPDF(plugin, filePaths);
    }
  });
  plugin.addCommand({
    id: "export-current-xournalpp-to-pdf",
    name: "Update current PDF",
    checkCallback: (checking) => {
      var _a;
      let filePath = (_a = plugin.app.workspace.getActiveFile()) == null ? void 0 : _a.path;
      if (filePath.includes(".pdf")) {
        if (!checking) {
          filePath = filePath == null ? void 0 : filePath.replace(".pdf", ".xopp");
          exportXoppToPDF(plugin, [filePath]);
        }
        return true;
      }
      return false;
    }
  });
}

// src/fileMenu.ts
var import_obsidian6 = require("obsidian");
function addXournalppOptionsToFileMenu(menu, file, plugin) {
  if (file instanceof import_obsidian6.TFile) {
    if (file.extension === "xopp") {
      addOpenInXournalppMenu(menu, file, plugin);
    } else if (file.extension === "pdf") {
      let xoppFile = findCorrespondingXoppToPdf(file.path, plugin);
      if (xoppFile) {
        addOpenInXournalppMenu(menu, xoppFile, plugin);
      }
    }
  } else if (file instanceof import_obsidian6.TFolder) {
    if (file == null ? void 0 : file.children) {
      addCreateXournalppMenu(menu, file, plugin);
    }
  }
}
function addOpenInXournalppMenu(menu, xoppFile, plugin) {
  menu.addItem((item) => {
    item.setTitle("Open in Xournal++").setIcon("pen-tool").onClick(() => {
      openXournalppFile(xoppFile, plugin.app);
    });
  });
  menu.addItem((item) => {
    item.setTitle("Update from Xournal++").setIcon("rotate-cw").onClick(() => {
      var _a;
      let filePath = (_a = plugin.app.workspace.getActiveFile()) == null ? void 0 : _a.path;
      filePath = filePath == null ? void 0 : filePath.replace(".pdf", ".xopp");
      exportXoppToPDF(plugin, [filePath]);
    });
  });
}
function addCreateXournalppMenu(menu, folder, plugin) {
  menu.addItem((item) => {
    item.setTitle("Create new Xournal++").setIcon("pen-tool").onClick(() => {
      var _a;
      new createXoppFileModal(plugin.app, plugin, (_a = folder == null ? void 0 : folder.path) != null ? _a : "").setTitle("Create a new Xournal++ note").open();
    });
  });
}

// src/pdfToolbar.ts
var import_obsidian7 = require("obsidian");
function addOpenInXournalppToPdfToolbar(file, plugin) {
  if (file && file.extension === "pdf") {
    const oldIcons = document.querySelectorAll(".xournalpp-open-icon");
    oldIcons.forEach((old) => old.remove());
    let xoppFile = findCorrespondingXoppToPdf(file.path, plugin);
    if (xoppFile) {
      const pdfToolbar = document.querySelector(".pdf-toolbar-right");
      if (pdfToolbar) {
        createPdfToolbarButton(pdfToolbar, xoppFile, plugin.app);
      }
    }
  }
}
function createPdfToolbarButton(pdfToolbar, xoppFile, app) {
  let xoppButton = new import_obsidian7.ButtonComponent(pdfToolbar).setClass("clickable-icon").setClass("xournalpp-open-icon").setButtonText("Edit in Xournal++").setIcon("pen-tool").setTooltip("Edit in Xournal++");
  xoppButton.onClick(() => {
    openXournalppFile(xoppFile, app);
  });
  pdfToolbar.appendChild(xoppButton.buttonEl);
}

// src/fileExplorerNav.ts
var import_obsidian8 = require("obsidian");
function addCreateXournalppNavIcon(plugin) {
  let fileExplorers = plugin.app.workspace.getLeavesOfType("file-explorer");
  fileExplorers.forEach((fileExplorer) => {
    var _a;
    let fileExplorerIconsNav = (_a = fileExplorer.view) == null ? void 0 : _a.headerDom.navButtonsEl;
    if (fileExplorerIconsNav && fileExplorerIconsNav.children.length > 2 && !fileExplorerIconsNav.querySelector(".xournalpp-create-icon")) {
      let createXoppButton = new import_obsidian8.ButtonComponent(fileExplorerIconsNav).setClass("clickable-icon").setClass("xournalpp-create-icon").setIcon("pen-tool").setTooltip("Create new Xournal++");
      createXoppButton.onClick(() => {
        new createXoppFileModal(plugin.app, plugin).setTitle("Create a new Xournal++ note").open();
      });
      fileExplorerIconsNav.insertAfter(createXoppButton.buttonEl, fileExplorerIconsNav.children[1]);
    }
  });
}

// src/fileExplorerFile.ts
function addOpenInXournalpp(plugin) {
  let fileExplorers = plugin.app.workspace.getLeavesOfType("file-explorer");
  fileExplorers.forEach((fileExplorer) => {
    var _a;
    let allFiles = (_a = fileExplorer.view) == null ? void 0 : _a.fileItems;
    const files = [];
    Object.entries(allFiles).forEach(([filePath, value]) => {
      if (filePath.endsWith(".pdf")) {
        let xoppFile = findCorrespondingXoppToPdf(filePath, plugin);
        if (xoppFile)
          files.push([value.tagEl, xoppFile]);
      }
    });
    files.forEach(([div, file]) => {
      div.innerText = "X++";
      div.classList.add("clickable-tag");
      div.onclick = () => {
        openXournalppFile(file, plugin.app);
      };
    });
  });
}

// src/listeners.ts
function setupListeners(plugin) {
  initialLoad(plugin);
  plugin.registerEvent(plugin.app.workspace.on("layout-change", () => {
    addCreateXournalppNavIcon(plugin);
    addOpenInXournalpp(plugin);
  }));
  plugin.registerEvent(plugin.app.workspace.on("file-open", (file) => {
    addOpenInXournalppToPdfToolbar(file, plugin);
  }));
  plugin.registerEvent(plugin.app.workspace.on("file-menu", (menu, file) => {
    addXournalppOptionsToFileMenu(menu, file, plugin);
  }));
  plugin.registerEvent(plugin.app.workspace.on("active-leaf-change", (leaf) => {
    if ((leaf == null ? void 0 : leaf.getDisplayText()) === "Files") {
      addCreateXournalppNavIcon(plugin);
      addOpenInXournalpp(plugin);
    }
  }));
  plugin.registerEvent(plugin.app.vault.on("modify", (file) => {
    if (file.extension === "xopp" && plugin.settings.autoExport)
      exportXoppToPDF(plugin, [file.path], false);
  }));
  plugin.registerEvent(plugin.app.vault.on("create", (file) => {
    if (file.extension === "xopp" && plugin.settings.autoExport)
      exportXoppToPDF(plugin, [file.path], false);
  }));
}
function initialLoad(plugin) {
  if (plugin.settings.autoExport) {
    let files = plugin.app.vault.getFiles();
    files = files.filter((file) => file.extension === "xopp");
    let filePaths = files.map((file) => file.path);
    exportXoppToPDF(plugin, filePaths, false);
  }
  addCreateXournalppNavIcon(plugin);
  addOpenInXournalpp(plugin);
}

// src/ribbonIcons.ts
function createRibbonIcons(plugin) {
  plugin.addRibbonIcon("pen-tool", "Create new Xournal++ note", (evt) => {
    new createXoppFileModal(plugin.app, plugin).setTitle("Create a new Xournal++ note").open();
  });
}

// main.ts
var DEFAULT_SETTINGS = {
  autoExport: false,
  xournalppPath: "",
  templatePath: ""
};
var XoppPlugin = class extends import_obsidian9.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new XoppSettingsTab(this.app, this));
    setupListeners(this);
    createCommands(this);
    createRibbonIcons(this);
    checkXoppSetup(this);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
